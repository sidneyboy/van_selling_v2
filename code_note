 
need to migrate kong mag butang sa new agent phone kai nag add kog remarks 
sa van selling transaction table para sa time and date. thanks



$start_time = microtime(true);
$end_time = microtime(true);
$execution_time = ($end_time - $start_time);
return " Execution time of script = ".$execution_time." sec";












<?php

namespace App\Http\Controllers;
use App\Models\User;
use App\Models\Van_selling_transaction;
use App\Models\Van_selling_transaction_details;
use App\Models\Van_selling_upload_ledger;
use App\Models\Van_selling_customer;
use App\Models\Location;
use App\Models\Agent_user;
use App\Models\Van_selling_transaction_cart_details;
use App\Models\Van_selling_bo_deduction;
use DB;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Schema;

class Van_selling_transaction_controller extends Controller
{
    public function index()
    {
        Schema::disableForeignKeyConstraints();
        DB::table('van_selling_transaction_cart_details')->truncate();
        Schema::enableForeignKeyConstraints();

    	$agent_user = Agent_user::first();
        $location = Location::first();
        if (empty($agent_user)) {
            return redirect('agent_user');
        }else if(empty($location)){
            return redirect('location');
        }else{
            $van_selling_customer = Van_selling_customer::get();
            $principal = Van_selling_upload_ledger::select('principal')->where('end','!=','0')->groupBy('principal')->get();
            return view('van_selling_transaction',[
                'principal' => $principal,
            ])->with('active','van_selling_transaction')
              ->with('agent_user', $agent_user)
              ->with('van_selling_customer', $van_selling_customer);    
        }
    }

    public function van_selling_transaction_show_sku(Request $request)
    {


        //return $request->input();
        $check_van_selling_transaction_cart = Van_selling_transaction_cart_details::select('sku_code')->where('principal',$request->input('principal'))->get();

        $sku_ledger = Van_selling_upload_ledger::select(DB::raw('sku_code,description,end,unit_price,unit_of_measurement,sku_type,butal_equivalent'))
            ->from(DB::raw('(SELECT * FROM Van_selling_upload_ledgers ORDER BY id DESC) Van_selling_upload_ledgers'))
            ->where('principal', $request->input('principal'))
            ->where('end','!=','0')
            ->groupBy('sku_code')
            ->get();

        
        
        // if (count($check_van_selling_transaction_cart) != 0) {
        //     $counter = count($check_van_selling_transaction_cart);

        //     $sku_ledger = Van_selling_upload_ledger::select('sku_code','description')->where('principal',$request->input('principal'))->groupBy('sku_code')->whereNotIn('sku_code',$check_van_selling_transaction_cart->toArray())->get();

        //     $sku_database = Van_selling_transaction_cart_details::select('id','description','price','beg','quantity')->whereIn('sku_code',$check_van_selling_transaction_cart->toArray())->get();

        //     $counter_sku_ledger = count($sku_ledger);
        //     $filter = 'wala';
        //     foreach ($sku_ledger as $key => $data) {
        //         $ledger = DB::select(DB::raw("SELECT * FROM(SELECT * FROM Van_selling_upload_ledgers WHERE sku_code = '$data->sku_code' ORDER BY id DESC LIMIT 1)Var1 ORDER BY id ASC"));
            
        //         $sku_code[] = $ledger[0]->sku_code;
        //         $description[] = $ledger[0]->description;
        //         $ending_balance[] = $ledger[0]->end;
        //         $unit_price[] = $ledger[0]->unit_price;
        //         $principal[]  = $ledger[0]->principal;
        //         $beg_balance[] = $ledger[0]->beg;
        //         $unit_of_measurement[] = $ledger[0]->unit_of_measurement;
        //         $sku_type[] = $ledger[0]->sku_type;
        //         $butal_equivalent[] = $ledger[0]->butal_equivalent;

        //     }

        //     return view('van_selling_transaction_show_sku_page',[
        //         'check_van_selling_transaction_cart' => $check_van_selling_transaction_cart,
        //         'sku_code' => $sku_code,
        //         'sku_database' => $sku_database,
        //         'description' => $description,
        //         'ending_balance' => $ending_balance,
        //         'unit_price' => $unit_price,
        //         'principal' => $principal,
        //         'beg_balance' => $beg_balance,
        //         'unit_of_measurement' => $unit_of_measurement,
        //         'sku_type' => $sku_type,
        //         'butal_equivalent' => $butal_equivalent,
        //     ])->with('counter_sku_ledger',$counter_sku_ledger)
        //       ->with('counter',$counter);
        // }else{
        //     $sku_ledger = Van_selling_upload_ledger::select('sku_code')->where('principal',$request->input('principal'))->groupBy('sku_code')->get();
        //     $counter = count($sku_ledger);
        //     $filter = 'wala';
        //     foreach ($sku_ledger as $key => $data) {
        //         $ledger = DB::select(DB::raw("SELECT * FROM(SELECT * FROM Van_selling_upload_ledgers WHERE sku_code = '$data->sku_code' ORDER BY id DESC LIMIT 1)Var1 ORDER BY id ASC"));
            
        //         $sku_code[] = $ledger[0]->sku_code;
        //         $description[] = $ledger[0]->description;
        //         $ending_balance[] = $ledger[0]->end;
        //         $unit_price[] = $ledger[0]->unit_price;
        //         $principal[]  = $ledger[0]->principal;
        //         $beg_balance[] = $ledger[0]->beg;
        //         $unit_of_measurement[] = $ledger[0]->unit_of_measurement;
        //         $sku_type[] = $ledger[0]->sku_type;
        //         $butal_equivalent[] = $ledger[0]->butal_equivalent;

        //     }

        //     return view('van_selling_transaction_show_sku_page',[
        //         'sku_code' => $sku_code,
        //         'description' => $description,
        //         'ending_balance' => $ending_balance,
        //         'unit_price' => $unit_price,
        //         'principal' => $principal,
        //         'beg_balance' => $beg_balance,
        //         'unit_of_measurement' => $unit_of_measurement,
        //         'sku_type' => $sku_type,
        //         'butal_equivalent' => $butal_equivalent,
        //     ])->with('counter',$counter);
        // }
    }

    public function van_selling_transaction_proceed(Request $request)
    {
        
        //return $request->input('cart_id');
        

        if (is_null($request->input('cart_id'))) {

            $quantity_ordered = array_filter($request->input('quantity_ordered'));
            foreach ($quantity_ordered as $key => $data) {
                if ($data > $request->input('ending_balance')[$key]) {
                    $quantity_error[] = '<center>INSUFFICIENT QUANTITY OF <span style="color:blue;font-weight:bold;"> '. $key ." ". $request->input('description')[$key] ."</span>. REMAINING QUANTITY IS ONLY <span style='color:blue;font-weight:bold;'>". $request->input('ending_balance')[$key] ."</span></center";
                }else{
                    $van_selling_transaction_cart_details = new Van_selling_transaction_cart_details([
                        'sku_code' => $key,
                        'description' => $request->input('description')[$key],
                        'principal' => $request->input('principal_data')[$key],
                        'quantity' => $request->input('quantity_ordered')[$key],
                        'unit_of_measurement' => $request->input('unit_of_measurement')[$key],
                        'sku_type' => $request->input('sku_type')[$key],
                        'butal_equivalent' => $request->input('butal_equivalent')[$key],
                        'beg' => $request->input('ending_balance')[$key],
                        'price' => $request->input('unit_price')[$key],
                        'user_id' => $request->input('user_id'),
                    ]);
                    $van_selling_transaction_cart_details->save();
                }
            }

            if (!is_null($quantity_error)) {
                return $quantity_error;
            }else{
                if ($request->input('customer_selection') == 'NEW_CUSTOMER') {
                    $van_selling_customer = '';
                    $location = Location::select('id','location')->get();
                }else{
                    $van_selling_customer = Van_selling_customer::find($request->input('customer_selection'));
                    $location = '';
                }

                $van_selling_cart_data = Van_selling_transaction_cart_details::all();
                    return view('van_selling_transaction_proceed_page',[
                        'van_selling_cart_data' => $van_selling_cart_data,
                        'van_selling_customer' => $van_selling_customer,
                        'location' => $location,
                    ])->with('customer_selection',$request->input('customer_selection'))
                  ->with('full_name',$request->input('full_name'))
                  ->with('user_id',$request->input('user_id'));
            }

            

                 
             
        }else{
            $if_diff_ordered_and_current_quantity = array_diff($request->input('update_quantity_ordered'), $request->input('update_current_quantity_ordered'));
            $quantity_ordered = array_filter($request->input('quantity_ordered'));
            if (!is_null($if_diff_ordered_and_current_quantity)) {
                foreach ($request->input('update_quantity_ordered') as $id => $data) {
                    if ($request->input('update_current_quantity_ordered')[$id] != $data) {
                        if ($data > $request->input('update_ending_balance')[$id]) {
                            $quantity_error[] = '<center>INSUFFICIENT QUANTITY OF <span style="color:blue;font-weight:bold;"> '. $request->input('update_description')[$id] ."</span>. REMAINING QUANTITY IS ONLY <span style='color:blue;font-weight:bold;'>". $request->input('update_ending_balance')[$id] ."</span>.</center><br /> ";
                        }else{
                            Van_selling_transaction_cart_details::where('id', $id)
                                    ->update(['quantity' => $request->input('update_quantity_ordered')[$id]]);
                        }
                    }
                }
            }

            foreach ($quantity_ordered as $key => $data) {
                if ($data > $request->input('ending_balance')[$key]) {
                    $quantity_error[] = '<center>INSUFFICIENT QUANTITY OF <span style="color:blue;font-weight:bold;"> '. $key ." ". $request->input('description')[$key] ."</span>. REMAINING QUANTITY IS ONLY <span style='color:blue;font-weight:bold;'>". $request->input('ending_balance')[$key] ."</span></center><br />";
                }else{
                    $van_selling_transaction_cart_details = new Van_selling_transaction_cart_details([
                        'sku_code' => $key,
                        'description' => $request->input('description')[$key],
                        'principal' => $request->input('principal_data')[$key],
                        'quantity' => $request->input('quantity_ordered')[$key],
                        'unit_of_measurement' => $request->input('unit_of_measurement')[$key],
                        'sku_type' => $request->input('sku_type')[$key],
                        'butal_equivalent' => $request->input('butal_equivalent')[$key],
                        'beg' => $request->input('ending_balance')[$key],
                        'price' => $request->input('unit_price')[$key],
                        'user_id' => $request->input('user_id'),
                    ]);
                    $van_selling_transaction_cart_details->save();
                } 
            } 

            if (!is_null($quantity_error)) {
                return $quantity_error;
            }else{
                if ($request->input('customer_selection') == 'NEW_CUSTOMER') {
                    $van_selling_customer = '';
                    $location = Location::select('id','location')->get();
                }else{
                    $van_selling_customer = Van_selling_customer::find($request->input('customer_selection'));
                    $location = '';
                }

                $van_selling_cart_data = Van_selling_transaction_cart_details::all();
                    return view('van_selling_transaction_proceed_page',[
                        'van_selling_cart_data' => $van_selling_cart_data,
                        'van_selling_customer' => $van_selling_customer,
                        'location' => $location,
                    ])->with('customer_selection',$request->input('customer_selection'))
                  ->with('full_name',$request->input('full_name'))
                  ->with('user_id',$request->input('user_id'));
            }
        }


    }

    public function van_selling_transaction_summary(Request $request)
    {   
        //return $request->input();
        date_default_timezone_set('Asia/Manila');
        $date = date('Y-m-d');
        $date_receipt = date('Y-m');

        $van_selling_transaction = Van_selling_transaction::select('delivery_receipt')->latest()->first();
       
        if (!is_null($van_selling_transaction)) {
            $var_explode = explode('-', $van_selling_transaction->delivery_receipt);
            $series = $var_explode[4];
            $delivery_receipt = "VS-". $request->input('user_id') ."-". $date_receipt ."-". str_pad($series + 1,4,0, STR_PAD_LEFT);
        }else{
            $delivery_receipt = "VS-". $request->input('user_id') ."-". $date_receipt  ."-0001";
        }

        $van_selling_cart_data = Van_selling_transaction_cart_details::all();

        

        return view('van_selling_transaction_summary_page',[
                'van_selling_cart_data' => $van_selling_cart_data,
            ])->with('customer_selection',$request->input('customer_selection'))
            ->with('store_id',$request->input('store_id'))
            ->with('full_name',$request->input('full_name'))
            ->with('user_id',$request->input('user_id'))
            ->with('pcm_number',strtoupper($request->input('pcm_number')))
            ->with('bo_amount',str_replace(',', '', $request->input('bo_amount')))
            ->with('delivery_receipt',$delivery_receipt)
            ->with('date',$date)
            ->with('address',strtoupper($request->input('address')))
            ->with('barangay',strtoupper($request->input('barangay')))
            ->with('location',strtoupper($request->input('location_data')))
            ->with('store_name',strtoupper($request->input('store_name')))
            ->with('store_type',strtoupper($request->input('store_type')));
    }

    public function van_selling_transaction_summary_save(Request $request)
    {
        //return $request->input();

        date_default_timezone_set('Asia/Manila');
        $date = date('Y-m-d');

        if ($request->input('customer_selection') == 'NEW_CUSTOMER') {
             $explode = explode('-', $request->input('location'));
             $location_id = $explode[0];

             $van_selling_customer = new Van_selling_customer([
                'store_name' => $request->input('store_name'),
                'store_type' => $request->input('store_type'),
                'address' => $request->input('address'),
                'location_id' => $location_id,
                'barangay' => $request->input('barangay'),
            ]);

            $van_selling_customer->save();
        }

        $van_selling_transaction_save = new Van_selling_transaction([
            'delivery_receipt' => $request->input('delivery_receipt'),
            'store_name' => $request->input('store_name'),
            'store_type' => $request->input('store_type'),
            'total_amount' => $request->input('total_amount'),
            'full_address' => $request->input('location') ." ". $request->input('barangay') ." ". $request->input('address'),
            'status' => 'PAID',
            'pcm_number' => $request->input('pcm_number'),
            'bo_amount' => $request->input('bo_amount'),
            'date' => $date,
        ]);

        $van_selling_transaction_save->save();

        $van_selling_cart_data = Van_selling_transaction_cart_details::all();

        foreach ($van_selling_cart_data as $key => $data) {
            if ($data->quantity != 0) {
               
                $van_selling_transaction_details_save = new Van_selling_transaction_details([
                    'van_selling_trans_id' => $van_selling_transaction_save->id,
                    'description' => $data->description,
                    'principal' => $data->principal,
                    'sku_code' => $data->sku_code,
                    'quantity' => $data->quantity,
                    'price' => $data->price,
                    'amount' => $request->input('amount')[$data->sku_code],
                    'status' => '',
                    'remarks' => '',
                ]);

                $van_selling_transaction_details_save->save();

                $van_selling_upload_ledger = new Van_selling_upload_ledger([
                    'store_name' => $request->input('store_name'),
                    'principal' =>  $data->principal,
                    'sku_code' => $data->sku_code,
                    'description' => $data->description,
                    'unit_of_measurement' => $data->unit_of_measurement,
                    'sku_type' => $data->sku_type,
                    'butal_equivalent' => $data->butal_equivalent,
                    'reference' => $request->input('delivery_receipt'),
                    'beg' => $data->beg,
                    'van_load' => 0,
                    'sales' => $data->quantity*-1,
                    'adjustments' => 0,
                    'end' => $data->beg - $data->quantity,
                    'unit_price' => $data->price,
                    'date' => $date,
                    'status' => '',
                    'status_cancel' => '',
                ]);

                $van_selling_upload_ledger->save();
            }
        }

         return redirect()->route('van_selling_transaction_report');
    }

}
